version: "3.8"
services:
  backend:
    image: drf-be-user-service:latest
    container_name: "drf-iam-backend"
    env_file:
      - .env
    ports:
      - "8000:8000"
    networks:
      - drf_notification_service
    depends_on:
      migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      keycloak:
        condition: service_started

  migration:
    image: drf-be-user-service:latest
    container_name: "drf-iam-migration"
    command: python manage.py migrate
    env_file:
      - .env
    networks:
      - drf_notification_service
    depends_on:
      backend_db:
        condition: service_healthy

  backend_db:
    image: postgres:16
    container_name: "drf-iam-backend-db"
    restart: on-failure
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - ~/temp/docker-volumes/drf-iam-database:/var/lib/postgresql/data
    ports:
      - "5430:5432"
    networks:
      - drf_notification_service
    healthcheck:
        test: ["CMD", "pg_isready",  "-U", "${DB_USER}", "-d", "${DB_NAME}"]

  redis:
    image: redis:6.2.6-alpine
    container_name: "drf-iam-redis"
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6378:6379"
    networks:
      - drf_notification_service
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: "drf-iam-keycloak"
    command:
      - start-dev
    environment:
      KC_DB: postgres
      KC_DB_USERNAME: ${DB_USER}
      KC_DB_PASSWORD: ${DB_PASSWORD}
      KC_DB_URL: jdbc:postgresql://keycloak_db:5432/${KEYCLOAK_DB_NAME}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USERNAME}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    ports:
      - "8081:8080"
    restart: always
    networks:
      - drf_notification_service
    depends_on:
      keycloak_db:
        condition: service_healthy

  keycloak_db: # database to be used by keycloak
    image: postgres:16
    container_name: "drf-iam-keycloak-db"
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${KEYCLOAK_DB_NAME}
    volumes:
      - ~/temp/docker-volumes/drf-iam-keycloak-database:/var/lib/postgresql/data
    ports:
      - "5428:5432"
    networks:
      - drf_notification_service
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${KEYCLOAK_DB_NAME}" ]

  kafka:
    image: wurstmeister/kafka
    container_name: "dfr-iam-kafka"
    ports:
      - "9091:9092"
      - "2182:2181"
    volumes:
      - $PWD/kafka_config/kafka_server_jaas.conf:/opt/kafka/config/kafka_server_jaas.conf
      - $PWD/kafka_config/kafka_server_properties.properties:/opt/kafka/config/server.properties
      - $PWD/kafka_config/config.conf:/opt/kafka/config.conf
      - $PWD/kafka_config/kafkastart.sh:/opt/kafka/kafkastart.sh
    environment:
      KAFKA_OPTS: -Djava.security.auth.login.config=/opt/kafka/config/kafka_server_jaas.conf
    command: "
          bash -c '/opt/kafka/bin/zookeeper-server-start.sh /opt/kafka/config/zookeeper.properties & /opt/kafka/kafkastart.sh
          '"
    healthcheck:
      test: [ "CMD", "/opt/kafka/bin/kafka-topics.sh", "--bootstrap-server", "kafka:9092", "--command-config", "/opt/kafka/config.conf", "--list" ]
    restart: on-failure
    networks:
      - drf_notification_service

networks:
  drf_notification_service:
    name: drf_notification_network
